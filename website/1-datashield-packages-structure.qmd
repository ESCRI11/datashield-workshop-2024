---
title: "1. DataSHIELD packages structure"
format: html
engine: knitr
---

```{css}
#| echo: false
p {
  text-align: justify
}
```

DataSHIELD packages have a very particular structure, that is in first instance defined by being a combination of two package that act simultaniously. The reason for this is that when we analyze data through DataSHIELD we have two actors, 1) the client (who does the analysis) and 2) the server (where the data is stored), given the "taking the analysis to the data" approach of DataSHIELD we can easily understand that one package will be communicating from the analyst laptop to the package on the data server.

We can illustrate this interaction with a simple figure.

####figura tipica de datashield amb flechetes, igual explicarla una mica

## convencions tipiques datashiel

parlar que en general escriurem funcions ds.XX al client i la seva part respectiva al servidor es diura XXDS, doncs en general es normal que una funcio del client tingui com objectiu cridar una altra funcio en particular del servidor, sense ser aixo una regla dor

## DSI: Communicating from client to server

Now that we understand why two packages are required, let's see which tool we have to perform communications between them. The tool that we will use is called **DSI**, short for "DataSHIELD Interface". This tool will allow us to send queries from the packages on the client to the server ones, as well as recieve the server response with the results that we want to use or show the the researcher.

::: {.callout-note}
The DSI package is also responsible for creating connections to the server (`datashield.login`), handling workspaces (`datashield.workspaces`) and many other stuff, this is not connected to package development.
:::

### Communication types

With DSI there are two different types of communications we can perform, one telling the server to assign the result of a function to a variable, the other telling the server to return the result of a function. It is important to notice that not _any_ function can be used; we, as package developers, will develop a set of functions on the server package and each of them will only be available to be used one way or another, therefore, this information will be specified on the server package (see XXX).

explicar que aquestes funcions es fan servir al paquet del client per comunicarse amb el servidor

#### Assign functions

ficar exemple de codi DSI::assign etc i explicar doncs que es correra la funcio XX i sassignara el valor a la variable Y AL servidor

#### Aggregate functions

lo mateix per dir que els resultats els podem assignar a una variable al CLIENT, crec que sentendra facil

#### DATASHIELD file

explicar que hi ha el datashiel file al paquet del servidor on especificarem quina funcio fa que, ficar alguna especie de ascii folder tree de un paquet tipic de R per explicar on va exactament

dir que tambe es pot ficar al DESCRIPTION rollo com u fa dsOmics o dsBase.

### Quedarie abans del exercisi parlar de que son els datasources, que es el objecte de login i tal i que es pase a les funcions de DSI

### Exercise 1

1. Create two R packages: `dsClient` and `dsServer`

::: {.callout-tip collapse="true"}
## Tip

Make your life easier by using `usethis::create_package("dsClient")`
:::

2. On the `dsClient` package create a function named `ds.assignString` that takes as input argument a string, and sends it to the assign function `assignStringDS` from the `dsServer` package.

::: {.callout-tip collapse="true"}
## Remember

Add `#' @export` on top of your new R function to export it. Then, run `devtools::document()` so it gets added to the `NAMESPACE` file of your package automatically, this will allow you to `library(dsClient)` and be able to call `ds.assignString`.
:::

3. On the `dsServer` package create a function named `assignStringDS` that takes as input argument a string, and returns that string.

4. Declare the `assignStringDS` as a DataSHIELD assign function.


ara ia tenim el nostre primer paquet, com el testejem? aja punt 2. dsLite, testing packages locally

punt X parlar de lo de resources.js per el opal? igual deixar la info per alli per si algu se la vol llegir?
igual seccio desenvolupar resources//igual aixo es un altre workshop?



